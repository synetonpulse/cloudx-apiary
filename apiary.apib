FORMAT: 1A
HOST: https://api.adminpulse.be

# AdminPulse API documentation

This documentation describes the adminpulse api endpoints.
In case you have any feedback or miss a certain functionality, let us know via support@adminpulse.be

- API Base URL : <code>api.adminpulse.be</code>
- API Identity token URL : <code>login.adminpulse.be/connect/token</code>
- API Identity authorize URL : <code>login.adminpulse.be/connect/authorize</code>

###General
####Errors
Status codes
- <code>200</code> OK
- <code>400</code> Bad Request, the endpoint was called using invalid data
- <code>401</code> Unauthorized, invalid or missing access token
- <code>404</code> Resource not found, make sure the correct URL was used
- <code>429</code> Too Many Requests, you're allowed to make 60 calls per minute.
- <code>500</code> Internal Server Error, make sure the correct access token was provided

### Authentication
OAuth2 will be used to protect adminpulse endpoints.
Before you can start using our endpoints, send a request to support@adminpulse.be to request a <code>client_id</code> and <code>client_secret</code> or Personal Access Token.

####Option 1 - Using a website with callback url
Keep in mind that you will have to register a <code>redirect URL</code> as well. This will be the URL being called by our OAuth authentication.

<i>example</i> : https://yourcompany/adminpulse/callback

Call the authorize endpoint using the specific parameters

<code>https://login.adminpulse.be/connect/authorize?client_id=***&response_type=code&scope=api.connect%20offline_access&redirect_uri=https://***/callback</code>

_Note : keep in mind that scopes need to be space delimited (using the %20 encoding)_

####Option 2 - Using a client application (or service)
In this case, no specific redirect or callback URL needs to be registered.
Call (post) the token endpoint to get access and refreshtokens
<code>https://login.adminpulse.be/connect/token</code>

- grant_type=password
- username=***
- password=***

####Option 3 - Using a Personal Access Token
In this case, a token will be given to you by the AdminPulse team. This token does not need to be refreshed, after being given the token, you can use it in the following header:
<code>Authorization: Bearer {PAT}</code>

###Scopes

To get a refresh token, you must request the offline_access scope. A refresh token allows you to refresh your access token and maintain an offline connection.

<ul>
<li>api.connect</li>
<li>offline_access (optional)</li>
</ul>

###Rate limiting
Your calls are rate limited by a combination of your unique client_id and the tenant you're making calls for (with a fallback value of the caller's IP Address).

The amount of calls remaining can be checked by looking at these response headers of each request:
- **x-remaining-calls-per-minute**: The amount of calls you can still make.
- **x-total-calls-per-minute**: The total amount of calls you can make per minute.

Please note: the minute referred to above is a sliding window (defaults to 60/min).

###Changelog
#### 2022 - september
- Relation tags (add / remove)
- Relation activate / deactivate
- Relation update
- Relation add address

#### 2022 - march
- It is now possible to filter relations based on the relation type (company, person, etc)

#### 2022 - february
- Get DMS folders (tree view)
- Get task templates
- Get tasks
- Get relation communication information
- Upload a relation eID 

#### 2022 - January 
- It is now possible to create relations using 
- api.adminpulse.be/relations/**person/add**
- api.adminpulse.be/relations/**company/add**
- api.adminpulse.be/relations/**soleproprietor/add**


####Postman
Check our postman collection to explore our API, check multiple examples and generate code based on your desired programming language.

https://postman.adminpulse.be/

# Group Relations
#### CRM type
* 0 = Other
* 2 = Prospect
* 3 = Customer
* 4 = Own Company

#### Type
* 0 = Company
* 1 = Sole proprietor
* 2 = Person

#### Relation link types
* 1 = Contacts (just a regular contact)
* 2 = Beneficiaries (begunstigde)
* 3 = Trustee (lasthebber) 
* 4 = Company owner (bedrijfsleider)
* 5 = Partner
* 6 = Shareholder (aandeelhouder)
* 7 = Auditor (bedrijfsrevisor, commisaris)
* 8 = Control by other means (controle door andere middelen)

#### Company owner position
* CEO = 0,
* Manager = 1,
* Director = 2,
* Administrator = 3,
* ExecutiveManager = 4,
* Associate = 5,
* ManagingDirector = 6,
* DailyManagementNonProfit = 7,
* ManagementNonProfit = 8,
* Liquidator = 9

#### Property rights (aandelen eigendomsrechten)
* 0 = Usufruct (vruchtgebruik)
* 1 = Bare ownership (naakte, blote eigendom)
* 2 = Full ownership (volle eigendom)
* 3 = Joint ownership (onverdeeldheid)

####Accounting software types
* 0 = Unknown
* 1 = Office
* 2 = Yuki
* 3 = ExactOnline
* 4 = ExpertMPlus
* 5 = Sage100
* 6 = SageBob
* 7 = WinBooks
* 8 = Octopus
* 9 = VeroCount
* 10 = Quadra
* 11 = Wings
* 12 = Horus
* 13 = WinAuditor
* 14 = Xero
* 15 = SageOne
* 16 = QuickBooks
* 17 = Other
* 18 = Popsy / Allegro
* 19 = Cubic
* 20 = TopPower
* 21 = Venice
* 22 = Adsolut
* 23 = ExactProacc

####Social Secretariat
* Other = 1,
* Attentia = 2,
* Securex = 3,
* Acerta = 4,
* Partena = 5,
* Alia = 6,
* Sodalis = 7,
* Randstad = 8,
* SDWorx = 9,
* Sofidi = 10,
* Accuria = 11,
* Caritas = 12,
* Sodiwe = 13,
* Xerius = 14,
* Liantis = 15,
* Incozina = 16,
* Salar = 17,
* Sodibe = 18,
* HDI = 19,
* UCM = 20,
* GroupS = 21,
* NatPat = 22,
* Unknown = 254,
* None = 255

####Social Security Fund
* Other = 1,
* GroupS = 2,
* Xerius = 3,
* Liantis = 4,
* Partena = 5,
* Acerta = 6,
* Securex = 7,
* Incozina = 8,
* Multipen = 9,
* Entraide = 10,
* Ucm = 11,
* NationalFund = 12,
* Nisse = 13, 
* Unknown = 254,
* None = 255

#### Vat periodicity
* Unknown = 0,
* Monthly = 1,
* Quarterly = 2,
* ExemptionSmallEnterprise = 3,
* ExemptionAgriculture = 4,
* Yearly = 5,
* ExemptionArticle44 = 6

#### General Meeting Formula Day
* WorkDay = 0,
* Monday = 1,
* Tuesday = 2,
* Wednesday = 3,
* Thursday = 4,
* Friday = 5,
* Saturday = 6,
* Sunday = 7

#### General Meeting Formula Week
* First = 0,
* Second = 1,
* Third = 2,
* Fourth = 3,
* Penultimate = 4,
* Last = 5

#### General Meeting Formula Fallback
* SameDay = 0,
* NextWorkDay = 1,
* PreviousWorkDay = 2,
* NextMonday = 3,
* NextTuesday = 4,
* NextWednesday = 5,
* NextThursday = 6,
* NextFriday = 7,
* NextSaturday = 8,
* NextSunday = 9

#### General Meeting Type
* None = 0,         // No general meeting
* FixedDate = 1,    // Always on a fixed date (day/month)
* Formula = 2,      // Use formula
* FreeDate = 3,     // A user has to fill in the date manually each year

#### Financial Statement Schema
* Reduced = 0,  // Verkort
* Full = 1,     // Volledig
* Micro = 2,    // Micro
* NotApplicable = 3,    // Niet van toepassing

#### Risk level (anti money laundering)
* Low = 0,
* Standard = 1,
* High = 100,

#### Communication medium
* PhysicalAddress = 0,
* Email = 1,
* Phone = 2,
* SocialMedia = 3,
* Mobile = 4,
* PostBox = 5

#### Communication purpose
* Other = 0,
* BillingAndReminder = 1, //For billing and reminder mails
* TaskManagement = 2,
* BillingOnly = 3 //Only for billing mails, no reminders

#### Communication email type
* To = 0,
* Cc = 1,
* Bcc = 2

#### Relation link From | To
A relation link will be available in both directions. 
A relation will be <code>Partner</code> (defined as From), whereas the other side of the relation will be described as <code>Partner Of</code> (defined as To)

## List relations [/relations?page={page}&pageSize={pageSize}&lastSyncTime={lastSyncTime}&searchCriteria={searchCriteria}&crmType={crmType}&type={type}&includeInactive={includeInactive}]

### GET [GET]
List all relations with linked relations included (see single relation for all properties available)

+ Parameters
    + page (number, optional, `0`) ... When using paged request, pass in page number.
    + pageSize (number, optional, `50`) ... Number of results to return per page.
    + lastSyncTime (string, optional, `10102010`) ... Get changes newer than the given last sync time. This will allow partial updates. Format ddMMyyyy`)
    + searchCriteria (string, optional, `3237555555`) ... Search by name, telephone number or VAT number
    + crmType (number, optional) ... Select relations of the given crmtype (customer, prospect, etc) only
    + type (number, optional) ... Select relations of the given type (company, natural peroson, etc) only
    + includeInactive: `true | false` (string, optional) - Relations that have an end date in the past, will be filtered out from the result by default. This parameter can be configured to include the inactive relations.
+ Response 200 (application/json)

        [
            {
            "results": [
                {
                    "lastSyncDate": "2019-07-16T11:19:58.2778128",
                    "uniqueIdentifier": "APR00084",
                    "name": "Muziek en Co",
                    "addressStreet": "De Regenboog",
                    "addressNumber": "11",
                    "addressCity": "Mechelen",
                    "addressZipCode": "2800",
                    "addressCountryCode": "BE",
                    "addressCountry": "Belgium",
                    "legalForm": "BV",
                    "email": "bart.dekeersmaeker@syneton.be",
                    "phone": "+32 3 755 55 55",
                    "mobile": "+32 479 99 99 99"
                ],
            "pageCount": 2,
            "pageSize": 5,
            "totalRowCount": 7
            }
            
        ]

## Single relation [/relations/{uniqueidentifier}]

### GET [GET]
Get a single relation with all linked relations.

+ Parameters
    + uniqueidentifier (string, required, `APR00132`) The unique identifier, as defined by Admin Pulse.

+ Response 200 (application/json)

        [
            {
            "lastSyncDate": "2019-07-01T11:19:58.2778128",
            "uniqueIdentifier": "APR00084",
            "crmType": 3,
            "code": "KC00027",
            "startDate": "2019-01-14T00:00:00",
            "endDate": "2020-01-14T00:00:00",
            "foundingDate": "2019-01-14T00:00:00",
            "name": "Muziek en Co",
            "legalForm": "BVBA",
            "legalFormXbrl": "015",
            "addressStreet": "Bosdorp",
            "addressNumber": "11",
            "addressCity": "Mechelen",
            "addressZipCode": "2800",
            "addressCountryCode": "BE",
            "addressCountry": "Belgium",
            "email": "bart.dekeersmaeker@syneton.be",
            "phone": "+32 3 755 55 55",
            "mobile": "+32 479 99 99 99",
            "endFiscalYear": "2000-12-31T00:00:00",
            "vatNumber": "BE 0420.222.333",
            "totalRisk": 100,
            "purposeTransaction": "Anti - witwas : Doel van de relatie",
            "natureTransaction": "Anti - witwas : Aard van de transactie",
            "accountingSoftware": 22,
            "accountingAccessCode": "-xyz-",
            "accountingDigitalMailbox": "sample@inbox.com",
            "accountingRelationcode": "rel-123",
            "socialSecretariat": 2,
            "socialSecurityFund": 6,
            "jurisdictionCode": "3",
            "jurisdiction": "Antwerpen, afdeling Antwerpen",
            "vatStructuredCommunication": "082885668426",
            "bankName": "Belfius",
            "bankIBAN": "BE71096123456769",
            "bankBIC": "GKCCBEBB",
            "nextGeneralMeetingDate": "2019-01-14T00:00:00",
            "generalMeetingTime": "10:50:39",
            "generalMeetingLocation": "Antwerp",
            "generalMeetingFormulaDay": 0,
            "generalMeetingFormulaWeek": 1,
            "generalMeetingFormulaMonth": 2,
            "generalMeetingFormulaType": 2,
            "generalMeetingFormulaFallback": 0,
            "financialStatementSchema": 2,
            "assistant": "Bart De Keersmaeker",
            "assistantEmail": "bart.dekeersmaeker@syneton.be",
            "assistantBackup": "Relation",
            "assistantBackupEmail": "relation@hotmail.com",
            "associate": "Admin",
            "associateEmail": "admin@gmail.com",
            "responsible": "Cindy",
            "responsibleEmail": "cindy@invalid.com",
            "remark": "Small remark",
            "idCardNumber": "12345678901",
            "idCardNumberExpiryDate": "2021-12-31T00:00:00",
            "tags": [
                "connect",
                "postman"
            ],            
            "ubo": {
                "relationUboDetails": [
                    {
                        "uniqueIdentifier": "APR00141",
                        "name": "Sample",
                        "uboPercentage": 0.39024,
                        "votesPercentage": 1.00000,
                        "sharesPercentage": 0.39024,
                        "uboCalculationResult": 10
                    },
                    {
                        "uniqueIdentifier": "APR00127",
                        "name": "Sample",
                        "uboPercentage": 0.39024,
                        "votesPercentage": 1.00000,
                        "sharesPercentage": 0.39024,
                        "uboCalculationResult": 10
                    }
                ]
            },
            "froms": [
                {
                    "linkType": 1,
                    "uniqueIdentifier": "APR00002"
                },
                {
                    "linkType": 6,
                    "uniqueIdentifier": "APR00141",
                    "shares": 50,
                    "votes": 50,
                    "representedByUniqueIdentifier": "APR00001"
                },
                {
                    "linkType": 6,
                    "uniqueIdentifier": "APR00127",
                    "shares": 60,
                    "votes": 60,
                    "representedByUniqueIdentifier": "APR00001"
                },
                {
                    "linkType": 4,
                    "uniqueIdentifier": "APR00010"
                }
            ],
            "tos": []
            }
        ]

### GET Communication [GET /relations/communication/{uniqueidentifier}]
Get a single relation with all linked relations.

+ Parameters
    + uniqueidentifier (string, required, `APR00132`) The unique identifier, as defined by Admin Pulse.

+ Response 200 (application/json)

        {
            "id": "d8f63b11-ddd0-49f7-9978-668d28fb54ef",
            "lastSyncDate": "2022-02-08T09:27:26.7333333",
            "uniqueIdentifier": "APR00151",
            "addresses": [
                {
                    "id": "3af9f6ef-ba88-ec11-b820-00155d0f25d3",
                    "addressData": "sample+invoice@sample.com",
                    "medium": 1
                },
                {
                    "id": "419bd0c4-17a1-48dd-b4e9-3e28bc20fef7",
                    "addressData": "+32 479 99 91 51",
                    "medium": 4
                },
                {
                    "id": "35d8220e-3103-46a0-8366-8ec59b09b3a3",
                    "addressData": "+32 3 755 55 55",
                    "medium": 2
                },
                {
                    "id": "98d0b00a-3d1c-44d2-a7f0-b4f98951e8b7",
                    "addressData": "Street",
                    "number": "10",
                    "box": "B005",
                    "city": "Gent",
                    "zipCode": "9000",
                    "countryCode": "BE"
                }
            ],
            "code": "CON-151",
            "accountingRelationcode": "YUK123",
            "communicationSettings": [
                {
                    "addressId": "3af9f6ef-ba88-ec11-b820-00155d0f25d3",
                    "purpose": 1
                }
            ]
        }
        
## Add relation  [/relations]

### POST Company [POST /relations/company/add]
Create a relation of type Company.

+ Request (application/json)
    + Attributes
        + enterpriseNumber: `0728.606.123` (string, required)
        + name: `Enterprise name`  (string, required)
        + country: `BE`  (string, required) - 2 letter country code
        + crmType: `2` (number, required)
        + language: `NL`  (string) - 2 letter language code
        + website: `http://www.adminpulse.be`  (string)
        + telephone: `+3237558888`  (string)
        + mobile: `+32499999999`  (string)
        + email: `info@adminpulse.be`  (string)
        + remark: `Sample remark`  (string)

+ Response 200 (application/json)

        [
            {
            "uniqueIdentifier": "APR00084"
            }
        ]

### POST Soleproprietor [POST /relations/soleproprietor/add]
Create a relation of type Soleproprietor.

+ Request (application/json)
    + Attributes
        + enterpriseNumber: `0728.606.123` (string, required)
        + name: `De Smet`  (string, required)
        + firstName: `Cindy`  (string, required)
        + country: `BE`  (string, required) - 2 letter country code
        + crmType: `2` (number, required)
        + nationalNumber: `84032002333` (string)
        + birthDate: `200384` (string) - ddMMyyyy
        + language: `NL`  (string) - 2 letter language code
        + website: `http://www.adminpulse.be`  (string)
        + telephone: `+3237558888`  (string)
        + mobile: `+32499999999`  (string)
        + email: `info@adminpulse.be`  (string)
        + remark: `Sample remark`  (string)

+ Response 200 (application/json)

        [
            {
            "uniqueIdentifier": "APR00099"
            }
        ]        
        
### POST Person [POST /relations/person/add]
Create a relation of type natural person.

+ Request (application/json)
    + Attributes
        + name: `De Smet`  (string, required)
        + firstName: `Cindy`  (string, required)
        + country: `BE`  (string, required) - 2 letter country code
        + crmType: `2` (number, required)
        + nationalNumber: `84032002333` (string)
        + birthDate: `200384` (string) - ddMMyyyy
        + language: `NL`  (string) - 2 letter language code
        + website: `http://www.adminpulse.be`  (string)
        + telephone: `+3237558888`  (string)
        + mobile: `+32499999999`  (string)
        + email: `info@adminpulse.be`  (string)
        + remark: `Sample remark`  (string)

+ Response 200 (application/json)

        [
            {
            "uniqueIdentifier": "APR00099"
            }
        ]    
        
### POST eid [POST /relations/eid]
Update a given relation with an eid file (can be XML or PDF document)

+ Request (form-data)
    + Attributes
        + file (object, required) - form-data File
        + fileName  (string, required)
        + usedocumentrecognition (boolean, required)
        + nationalnumber  (string)
        + firstname  (string)
        + lastname  (string)
        
+ Response 200 (application/json)

### Deactivate relation [PUT /relations/{uniqueIdentifier}/deactivate]

+ Response 200 (application/json)

### Activate relation [PUT /relations/{uniqueIdentifier}/activate]

+ Response 200 (application/json)

## Update relation  [/relations/update]

### Update [PUT /relations/{uniqueIdentifier}]
Update a given relation.

+ Request (application/json)
    + Attributes
        + name: `Syneton`  (string)
        + commercialname: `XYZ`  (string)
        + website: `http://www.syneton.be`  (string)
        + phone: `+3237555555`  (string)
        + mobile: `+324799999`  (string)
        + email: `info@syneton.be`  (string)
        
+ Response 200 (application/json)

## Update relation address [/relations/address]

### Update [POST /relations/{uniqueIdentifier}/addresses]
Add an address to the given relation relation.

+ Request (application/json)
    + Attributes
        + street: `Sample street`  (string, required)
        + number: `10`  (string, required)
        + box: ``  (string)
        + zip: `9100`  (string)
        + city: `Sint-Niklaas`  (string)
        + country: `BE`  (string)
        + isMain: `true`  (boolean)
        
+ Response 200 (application/json)

## Update relation tags  [/relations/{uniqueIdentifier}/tags]

### Add tag [POST /relations/{uniqueIdentifier}/tags/tagname]
Add a tag to a given relation.

+ Response 200 (application/json)

### Delete tag [DELETE /relations/{uniqueIdentifier}/tags/tagname]
Delete a tag from a given relation.

+ Response 200 (application/json)

# Group Registrations
#### Resource type
* Work = 0,
* Cost = 1,
* Travel = 2,
* Absence = 3

## List pricelist items [/registrations/pricelistitems]

### GET [GET]
List all pricelist items.

+ Response 200 (application/json)

        [
            {
                "id": "630de493-6e79-43ba-8d89-f3991494a9e7"
                "name": "Administration",
                "code": "ADMIN",
                "type": 0
            },
            {
                "id": "630de493-6e79-43ba-8d89-f3991494a9e6"
                "name": "Software costs",
                "code": "SC",
                "type": 1
            }
        ]
        
## Tree of pricelist items [/registrations/pricelistitems/tree]

### GET [GET]
List all pricelist items as a tree (with main and subitems)

+ Response 200 (application/json)

        [
            {
                "id": "630de493-6e79-43ba-8d89-f3991494a9e7",
                "code": "A200",
                "name": "Holiday",
                "type": 3,
                "billable": false,
                "items": [
                    {
                        "id": "35aa9aba-916d-4894-b57a-375b887ff7d5",
                        "name": "Illness",
                        "type": 3,
                        "billable": false
                    },
                    {
                        "id": "98737a80-80b2-4597-95e2-3f66d11aa0b2",
                        "name": "Short holiday",
                        "type": 3,
                        "billable": false
                    }
                ]
            },
            {
                "id": "d369e4a4-8fdf-4c92-a259-a0928e36295a",
                "code": "100",
                "name": "Work",
                "type": 0,
                "billable": true,
                "items": []
            }
        ]        

## Add registration [/registrations/add]
Add a new registration for given user.

### Add [POST]

+ Request Add time / work registration (application/json)
    + Attributes
        + resourceType: `0` (number, required)
        + registrationDate: `2015-12-30` (required, string) - Date format as yyyy-mm-dd
        + relationIdentifier: `APR00001` (string, required) - Unique identifier of the relation
        + userIdentifier (string, required) - Email address of the employee
        + resourceIdentifier (string, required) - Pricelist item code or pricelist item ID
        + timeFrom: `11:00` (string, required)
        + timeTo: `12:00` (string, required)
        + billable (boolean) - Is this registration billable (invoicable)
        + inFixedAmount (boolean) - Is this registration included in the forfait/fixed amount/subscription
        + remarkInternal  (string)
        + remarkInvoice  (string)

+ Response 200 (application/json)

+ Request Add product / cost registration (application/json)
    + Attributes
        + resourceType: `1` (number, required)
        + registrationDate: `2015-12-30` (required, string) - Date format as yyyy-mm-dd
        + registrationDate: `2015-12-30` (required, string) - Date format as yyyy-mm-dd
        + relationIdentifier: `APR00001` (string, required) - Unique identifier of the relation
        + userIdentifier (string, required) - Email address of the employee
        + resourceIdentifier (required, string) - Pricelist item code
        + quantity (required, number)
        + remarkInternal  (string)
        + remarkInvoice  (string)

+ Response 200 (application/json)

+ Request  Add travel registration (application/json)
    + Attributes
        + resourceType: `2` (number, required)
        + registrationDate: `2015-12-30` (required, string) - Date format as yyyy-mm-dd
        + registrationDate: `2015-12-30` (required, string) - Date format as yyyy-mm-dd
        + relationIdentifier: `APR00001` (string, required) - Unique identifier of the relation
        + userIdentifier (string, required) - Email address of the employee
        + resourceIdentifier (required, string) - Pricelist item code
        + quantity (required, number)
        + remarkInternal  (string)
        + remarkInvoice  (string)
    
+ Response 200 (application/json)

+ Request Add absence registration (application/json)
    + Attributes
        + resourceType: `3` (number, required)
        + registrationDate: `2015-12-30` (required, string) - Date format as yyyy-mm-dd
        + relationIdentifier: `APR00001` (string, required) - Unique identifier of the relation
        + userIdentifier (string, required) - Email address of the employee
        + resourceIdentifier (string, required) - Pricelist item code
        + timeFrom: `11:00` (string, required)
        + timeTo: `12:00` (string, required)
        + remarkInternal  (string)
        + remarkInvoice  (string)
        
+ Response 200 (application/json)


# Group Documents
#### Document types
* Unknown = -1
* CODA = 3
* Eid = 10
* AssignmentLetter - Opdrachtbrief = 11
* AuthorizationLetter - Volmachtbrief = 12 
* Other = 13
* BTW - Ontvangstbewijs = 16
* BTW - Rekeninguittreksel = 44
* BTW - 604A - Aanvraag identificatie = 55
* BTW - 604B - Identificatie wijziging = 51
* BTW - 604C - Stopzetting = 56

* UBO - PDF uit register = 17
* AuthorizationList = 19
* Intracom ontvangstbewijs = 20
* Klantenlisting / BTW listing = 28 

* Jaarrekening betaalbevestiging = 30
* Jaarrekening = 31
* Jaarrekening betaalverzoek = 35
* Jaarrekening - Intern = 53

* FodPersonalIncomeTaxExcelReceipt = 33
* FodPersonalIncomeTaxExcelMandatesDeclarationStatus = 34
* KBO uittreksel = 36
* Rechtspersonenbelasting (aangifte) = 47
* Bedrijfsvoorheffing - Betalingsinstructies = 48

* Afschrijvingstabel = 49
* Lening - Aflossingstabel = 58
* Akte onroerende goederen = 59
* Verslag - Algemene vergadering = 50
* Verslag - Van het bestuursorgaan = 52
* Oprichtingsakte = 54
* Financieel plan = 57

* Contract - Huurovereenkomst = 5000
* Contract - Plaatsbeschrijving = 5001
* Contract - Lening = 5002

* PB - Tax On Web PDF = 21
* PB - Aanslagbiljet = 37
* PB - Voorbereiding van de aangifte in de personenbelasting = 38
* PB - Voorstel van vereenvoudigde aangifte = 39
* PB - Ontvangsbewijs - niet inwoner (PDF) = 43
* PB - Berekening = 46

* FOD - Vennootschapsbelasting ontvangstbewijs = 22 
* FOD - Inkomsten van buitenlandse oorsprong = 40
* FOD - Vennootschapsbelasting aangifte= 41
* FOD - Vennootschapsbelasting teruggave = 42

* eStox - PDF overzicht = 45

* Contract - Rental agreement / Huurovereenkomst = 5000
* Contract - Description of the location / Plaatsbeschrijving = 5001

* Fiche 274 = 27400
* Fiche 281.10 - Lonen = 28110
* Fiche 281.11 - Pensioenfiche = 28111
* Fiche 281.11 - Pensioenfiche - Betalingsfiche (PDOS) = 281110
* Fiche 281.12 - Vervangingsinkomsten
* Fiche 281.13 - Werkloosheidsuitkeringen = 28113
* Fiche 281.15 - Inkomsten uit pensioensparen = 28115
* Fiche 281.16 - Vergoedingen wegens blijvende ongeschiktheid = 28116
* Fiche 281.17 -  Brugpensioenen = 28117
* Fiche 281.18 - Vervangingsinkomen = 28118
* Fiche 281.20 - Bezoldigingen van bedrijfsleiders = 28120
* Fiche 281.30 - Subsidies, onderhoudsuitkeringen = 28130
* Fiche 281.40 - Lijfrenten en tijdelijke renten = 28140
* Fiche 281.45 - Auteursrechten = 28145
* Fiche 281.50 - Commissies, makelaarslonen, handelsrestorno’s, vacatiegelden, betalingen en andere voordelen alle aard = 28150
* Fiche 281.61 - Leningen = 28161
* Fiche 281.62 - Levensverzekering = 28162
* Fiche 281.63 - Rechtsbijstandsverzekering = 28163
* Fiche 281.71 - Liveraliteiten - Giften in geld = 28171
* Fiche 281.80 - PWA-cheques = 28180
* Fiche 281.81 - Dienstencheques = 28181
* Fiche 281.85 - Fonds vermindering van de totale energiekosten = 28185
* Fiche 281.90 - Teruggave sociale bijdrage = 28190
* Fiche 281.91 - Verkoop en aankoop onroerend goed = 28191
* Fiche 281.92 - Landbouwbeleid = 28192
* Fiche 281.93 - Inlichtingen openbare diensten = 28193
* Fiche 281.99 = 28199

* 273 = 2730
* 273A = 2734
* 273S = 2735

* MOSS = 62
* OSS - Ontvangstbewijs = 63
* OSS - Registratie = 67
* OSS - Aanvraag = 68
* OSS - Status vd ontvangen betalingen = 69

* NBB - Buitenlandse rekeningen = 70

* Belgisch staatsblad - Bijlage = 71

* Registration list (adminpulse registration xlsx) = 1000,

#### Signing status
* SigningEmpty = 1,
* SigningNeeded = 2,
* SigningRevoked = 3,
* SigningExpired = 4,
* SigningPending = 10,
* SigningFailed = 11,
* SigningRejected = 12,
* SigningCompleted = 20,
* SigningCompletedOriginal = 21,

## Add document [/documents/add]

### Add [POST]
* Form-data upload of a single document.
* In case *documenttype = -1*, the document will be *recognized* by AdminPulse.

+ Request (form-data)
    + Attributes
        + file (object, required) - form-data File
        + fileName  (string, required)
        + documentType (number, required)
        + creationDate: `2020-12-30` (string) - Date format as yyyy-mm-dd
        + documentDate: `2015-12-30` (string) - Date format as yyyy-mm-dd (will be used as document reference date)
        + relationIdentifier: `APR00001` (string) - Unique identifier of the relation
        + tagNames: `2020;PB` (string) - Seperated list of tags. Note : Tags will not be created when they don't exist.
+ Response 200 (application/json)

## List documents [/documents?page={page}&pageSize={pageSize}&relationIdentifier={relationIdentifier}&createDateFrom={createDateFrom}&createDateUntil={createDateUntil}&documentDateFrom={documentDateFrom}&documentDateUntil={documentDateUntil}&documentType={documentType}&signingStatus={signingStatus}&tagNames={tagNames}]

### GET [GET]
List all documents, based on the given query parameters.
By default, documents will not be public on our API. Make sure they are marked as "Public to API" by the user. 

More information can be found here : https://syneton.zendesk.com/hc/articles/360021907360

+ Parameters
    + page (number, optional, `0`) ... When using paged request, pass in page number.
    + pageSize (number, optional, `50`) ... Number of results to return per page.
    + relationIdentifier (string, optional, `APR00001`) ... Unique identifier of the relation
    + createDateFrom (string, optional, `30102010`) ... Documents created from
    + createDateUntil (string, optional, `30102011`) ... Documents created until
    + documentDateFrom (string, optional, `30102010`) ... Document date from (based on the content of the document, this could differ from the creation date)
    + documentDateUntil (string, optional, `30102011`) ... Document date from (based on the content of the document, this could differ from the creation date)
    + documentType (number, optional, `0`) ... The type of the document
    + signingStatus (number, optional, `0`) ... The signingStatus of the document (Signature pending, signed, etc)
    + tagNames (string, optional, `Permanent Dossier;PB`) ... ; delimited list of tags
+ Response 200 (application/json)

        [
            {
            "results": [
                {
                    "id": "4f492334-fdab-eb11-89ee-00155d0ee999",
                    "name": "AdminPulse-sample.docx",
                    "documentDate": "2021-05-03T10:49:16.962Z",
                    "documentType": 13,
                    "createDate": "2021-05-03T10:49:16.9620547Z",
                    "updateDate": "2021-05-03T11:02:23.1802061Z",
                    "signingStatus": 1,
                    "documentUrl": "https://dev-storage.adminpulse.be/db9f4bac-4246-4c9d-98de-99/other-documents/4f492334-fdab-eb11-89ee-00155d0eeb6e?sv=2018-03-28&sr=b&sig=01Tn1U3l9Vt47iItfY5pPhNaFsCZfND7%2BaGG1TPUp2c%3D&se=2021-09-22T08%3A25%3A59Z&sp=r&rsct=application%2Fvnd.openxmlformats-officedocument.wordprocessingml.document&rscd=attachment%3B filename%3D\"DO%2520NOT%2520DELETE%2520-%2520AdminPulse-invoice-template-fields%2520%2810%29.docx\"",
                    "mimeType": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    "tags": [
                        {
                            "name": "Permanent Dossier"
                        }
                    ],
                    "relationIdentifiers": [
                        "APR00575"
                    ]
                ],
            "currentPage": 0,
            "pageCount": 2,
            "pageSize": 5,
            "totalRowCount": 7
            }
        ]

## List tags & folders [/documents/tags]

### Tags [GET /documents/tags]
* Multiple tags can be assigned when adding a document.
* This method will return all available tags.

+ Response 200 (application/json)

        [
            {
                "name": "Personal"
            },
            {
                "name": "Prio"
            },
            {
                "name": "BTW"
            }
        ]

### Folders [GET /documents/folders]
+ Response 200 (application/json)

        [
            {
                "name": "Team",
                "tagId": "364a426f-0509-4199-ae27-9349c0217f9b",
                "children": [
                    {
                        "name": "Waasland",
                        "tagId": "71fda83f-8aef-4b29-884d-e20a2c37ff73",
                        "children": [],
                        "tagIds": [
                            "364a426f-0509-4199-ae27-9349c0217f9b",
                            "71fda83f-8aef-4b29-884d-e20a2c37ff73"
                        ],
                        "treeTagNames": "Team\\Waasland\\"
                    },
                    {
                        "name": "NoAccess",
                        "tagId": "184afd39-7313-eb11-8441-0003ff20453f",
                        "children": [],
                        "tagIds": [
                            "364a426f-0509-4199-ae27-9349c0217f9b",
                            "184afd39-7313-eb11-8441-0003ff20453f"
                        ],
                        "treeTagNames": "Team\\NoAccess\\"
                    }
                ],
                "tagIds": [
                    "364a426f-0509-4199-ae27-9349c0217f9b"
                ],
                "treeTagNames": "Team\\"
            },
            {
                "name": "Jaarrekening",
                "tagId": "0dae4054-a6bc-427d-a1b7-40c08a125c35",
                "children": [],
                "tagIds": [
                    "0dae4054-a6bc-427d-a1b7-40c08a125c35"
                ],
                "treeTagNames": "Jaarrekening\\"
            },
            {
                "name": "BTW",
                "tagId": "9f83bcdc-6ab6-4b75-96fb-f3b45c339f68",
                "children": [],
                "tagIds": [
                    "9f83bcdc-6ab6-4b75-96fb-f3b45c339f68"
                ],
                "treeTagNames": "BTW\\"
            }
        ]
        
# Group Tasks
#### Task status types
* ToDo = 0,
* InProgress = 1,
* Done = 2

#### Task template types
* ActualTask = 0
* DefaultTime = 1
* Condition = 2
* AutomaticMail = 3

## List tasktemplates [/tasks/templates?languageCode={languageCode}]
### List tasktemplates [GET]
A task can be based upon a task template. Each main task, can have multiple subtasks.
+ Request (application/json)
    + Attributes
        + languageCode: `nl | fr | en` (string, optional) - If no languageCode was passed, the languageCode of the user will be used.
+ Response 200 (application/json)

        [
            {
                "id": "556712fc-4fa6-40ef-961f-09b992031cb1",
                "name": "Birthday",
                "subtaskTemplates": [
                    {
                        "id": "d13427a4-5d52-4303-a9c1-5f8f9532db6b",
                        "type": 3,
                        "name": "Prepare card",
                        "priority": 1
                    },
                    {
                        "id": "7613a862-e72d-473a-af69-da81848f99e9",
                        "type": 0,
                        "name": "Send card",
                        "priority": 2
                    }
                ]
            }
        ]

## List tasks [/tasks?page={page}&pageSize={pageSize}&deadlineFrom={deadlineFrom}&deadlineUntil={deadlineUntil}&relationId={relationId}&maintasktemplateid={maintasktemplateid}]
### List tasks [GET]

+ Request (application/json)

+ Response 200 (application/json)

        {
            "results": [
                {
                    "id": "44b0e8ee-57fa-4dee-b6e0-cc816643bd7b",
                    "deadline": "2019-11-07T00:00:00",
                    "status": 2,
                    "relationId": "ae04f0fd-7c47-4da3-875f-4a0ced8e619c",
                    "templateId": "2c5a2a97-07fb-4826-98bd-41d427e14bfe",
                    "relationUniqueIdentifier": "APR00082",
                    "subtasks": [
                        {
                            "id": "c3d3aada-5329-4abe-bc57-7324ce7295f2",
                            "deadline": "2019-10-31T00:00:00",
                            "status": 2,
                            "templateId": "e27b50f6-61df-4aa2-89d5-b79709d971e4"
                        },
                        {
                            "id": "1cafb69e-6215-487b-9873-98a621828333",
                            "deadline": "2019-11-07T00:00:00",
                            "status": 2,
                            "templateId": "f084cbd3-c56d-45c5-ad12-ddbd61ced6e1"
                        }
                    ]
                }
            ],
            "currentPage": 0,
            "pageCount": 1,
            "pageSize": 50,
            "totalRowCount": 1
        }      

## Update status [/tasks/updateStatus]

### Update status [POST]

+ Request (application/json)
    + Attributes
        + deadline: `2020-12-30` (string, required) - Date format as yyyy-mm-dd
        + mainTaskName: `BTW listing`  (string, required)
        + subTaskName: `BTW listing opstellen`  (string, required)
        + inapplicable (boolean)
        + isBlocked (boolean)
        + status: `2` (number)

+ Response 200 (application/json)

# Group Interactions
#### Interaction types
* Note = 0,
* Telephone = 1,
* Appointment = 3

## Add interaction [/interactions/add]

### Add [POST]

+ Request (application/json)
    + Attributes
        + title: `This is a sample interaction title` (string, required)
        + description: `This is a sample description` (string)
        + relationIdentifier: `APR00001` (string)
        + interactiontype: `0` (number)
        + deadline: `30122020` (string, required) - Date format as ddMMyyyy

+ Response 200 (application/json)

# Group Users

## Me [/users/me]

### Me [GET]

* Return information about the currently logged in user
* E-mail is equal to the username within the AdminPulse environment

+ Response 200 (application/json)

        {
            "firstName": "John",
            "lastName": "Doe",
            "email": "johnd@gmail.com"
        }